(defmacro defn
  [name &rest args]
  (if-not (= (type name) SQFSymbol)
          (raise (SyntaxError "defn takes a name as a first argument")))
  `(setv ~name (fn ~@args)))

(defmacro -> [head &rest args]
    (setv ret head)
    (for [node args]
        (setv ret (if (isinstance node SQFExpression)
                      `(~(first node) ~ret ~@(rest node))
                      `(~node ~ret))))
    ret)

(defmacro ->> [head &rest args]
    (setv ret head)
    (for [node args]
        (setv ret (if (isinstance node SQFExpression)
                      `(~@node ~ret)
                      `(~node ~ret))))
    ret)

(defmacro as-> [head name &rest args]
    `(do (setv ~name ~head)
         ~@(lfor arg args `(setv ~name ~arg))
         ~name))

(defmacro if-not [test not-branch &optional yes-branch]
    `(if (not ~test) ~not-branch ~yes-branch))

(defmacro when [test &rest body]
    `(if ~test (do ~@body)))

(defmacro unless [test &rest body]
    `(if-not ~test (do ~@body)))

(defmacro cond [&rest branches]
    (or branches
        (return))

    (setv out
        `(if ~@(reduce + (gfor
                             branch branches
                             (if
                                 (not (and (is (type branch) SQFList) branch))
                                 (macro-error branch "each cond branch needs to be a nonempty list")
                                 (= (len branch) 1) (do
                                                        (setv g (gensym))
                                                        [`(do (setv ~g ~(first branch)) ~g) g])
                                 True
                                 [(first branch) `(do ~@(cut branch 1))])))))
    (print out)
    out)
;; %%
